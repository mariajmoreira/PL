Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> Comandos
Rule 1     Comandos -> Comando
Rule 2     Comandos -> Comandos Comando
Rule 3     Comando -> ExprR
Rule 4     Comando -> Declaracao
Rule 5     Comando -> Operacao
Rule 6     Comando -> Atribuicao NEWLINE
Rule 7     Comando -> FUNC
Rule 8     Comando -> MAINF
Rule 9     Factor -> num
Rule 10    Factor -> - num
Rule 11    Factor -> id
Rule 12    Factor -> TRUE
Rule 13    Factor -> FALSE
Rule 14    Factor -> ( ExprR )
Rule 15    ExprR -> Expr < Expr
Rule 16    ExprR -> Expr > Expr
Rule 17    ExprR -> Expr < = Expr
Rule 18    ExprR -> Expr > = Expr
Rule 19    ExprR -> Expr EQUALS Expr
Rule 20    ExprR -> Expr NOTEQUALS Expr
Rule 21    Termo -> Termo E Factor
Rule 22    Expr -> Expr OU Termo
Rule 23    ExprR -> Expr
Rule 24    Expr -> Termo
Rule 25    Expr -> Expr + Termo
Rule 26    Expr -> Expr - Termo
Rule 27    Expr -> Termo * Factor
Rule 28    Expr -> Termo % Factor
Rule 29    Expr -> Termo / Factor
Rule 30    Termo -> Factor
Rule 31    Declaracao -> INT id
Rule 32    Atribuicao -> id = ExprR
Rule 33    Atribuicao -> id = NOME ( )
Rule 34    Atribuicoes -> Atribuicao
Rule 35    Atribuicoes -> Atribuicoes Atribuicao
Rule 36    Operacoes -> Operacao
Rule 37    Operacoes -> Operacoes Operacao
Rule 38    Operacoes -> Operacoes NEWLINE Operacao
Rule 39    Operacao -> Atribuicoes
Rule 40    Operacao -> IFELSE
Rule 41    Operacao -> ONLYIF
Rule 42    Operacao -> FORDO
Rule 43    Operacao -> PRINTER
Rule 44    Operacao -> SCANNER
Rule 45    Operacao -> NOME ( )
Rule 46    IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes }
Rule 47    ONLYIF -> IF ( ExprR ) { Operacoes }
Rule 48    FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes }
Rule 49    ARGS -> ARG
Rule 50    ARG -> <empty>
Rule 51    ARG -> id
Rule 52    ARGS -> ARGS , ARG
Rule 53    FUNC -> DEF NOME ( ARGS ) { Operacoes }
Rule 54    FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE }
Rule 55    TEXTO -> TEXT
Rule 56    PRINTER -> PRINT ( TEXTO )
Rule 57    PRINTER -> PRINT ( id )
Rule 58    SCANNER -> SCAN ( id )
Rule 59    MAINF -> DEF MAIN ( ) { Operacoes }

Terminals, with rules where they appear

%                    : 28
(                    : 14 33 45 46 47 48 53 54 56 57 58 59
)                    : 14 33 45 46 47 48 53 54 56 57 58 59
*                    : 27
+                    : 25
,                    : 48 52
-                    : 10 26
/                    : 29
<                    : 15 17
=                    : 17 18 32 33
>                    : 16 18
DEF                  : 53 54 59
DO                   : 48
E                    : 21
ELSE                 : 46
EQUALS               : 19
FALSE                : 13
FOR                  : 48
IF                   : 46 47
INT                  : 31
MAIN                 : 59
NEWLINE              : 6 38 54 54
NOME                 : 33 45 53 54
NOTEQUALS            : 20
OU                   : 22
PRINT                : 56 57
SCAN                 : 58
STRING               : 
TEXT                 : 55
TRUE                 : 12
error                : 
id                   : 11 31 32 33 51 57 58
num                  : 9 10
{                    : 46 46 47 48 53 54 59
}                    : 46 46 47 48 53 54 59

Nonterminals, with rules where they appear

ARG                  : 49 52
ARGS                 : 52 53 54
Atribuicao           : 6 34 35
Atribuicoes          : 35 39
Comando              : 1 2
Comandos             : 2 0
Declaracao           : 4
Expr                 : 15 15 16 16 17 17 18 18 19 19 20 20 22 23 25 26
ExprR                : 3 14 32 46 47 48
FORDO                : 42
FUNC                 : 7
Factor               : 21 27 28 29 30
IFELSE               : 40
MAINF                : 8
ONLYIF               : 41
Operacao             : 5 36 37 38
Operacoes            : 37 38 46 46 47 48 48 53 54 59
PRINTER              : 43
SCANNER              : 44
TEXTO                : 56
Termo                : 21 22 24 25 26 27 28 29

Parsing method: LALR

state 0

    (0) S' -> . Comandos
    (1) Comandos -> . Comando
    (2) Comandos -> . Comandos Comando
    (3) Comando -> . ExprR
    (4) Comando -> . Declaracao
    (5) Comando -> . Operacao
    (6) Comando -> . Atribuicao NEWLINE
    (7) Comando -> . FUNC
    (8) Comando -> . MAINF
    (15) ExprR -> . Expr < Expr
    (16) ExprR -> . Expr > Expr
    (17) ExprR -> . Expr < = Expr
    (18) ExprR -> . Expr > = Expr
    (19) ExprR -> . Expr EQUALS Expr
    (20) ExprR -> . Expr NOTEQUALS Expr
    (23) ExprR -> . Expr
    (31) Declaracao -> . INT id
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )
    (53) FUNC -> . DEF NOME ( ARGS ) { Operacoes }
    (54) FUNC -> . DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE }
    (59) MAINF -> . DEF MAIN ( ) { Operacoes }
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    INT             shift and go to state 10
    NOME            shift and go to state 18
    id              shift and go to state 11
    DEF             shift and go to state 20
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    num             shift and go to state 28
    -               shift and go to state 22
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Comandos                       shift and go to state 1
    Comando                        shift and go to state 2
    ExprR                          shift and go to state 3
    Declaracao                     shift and go to state 4
    Operacao                       shift and go to state 5
    Atribuicao                     shift and go to state 6
    FUNC                           shift and go to state 7
    MAINF                          shift and go to state 8
    Expr                           shift and go to state 9
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 1

    (0) S' -> Comandos .
    (2) Comandos -> Comandos . Comando
    (3) Comando -> . ExprR
    (4) Comando -> . Declaracao
    (5) Comando -> . Operacao
    (6) Comando -> . Atribuicao NEWLINE
    (7) Comando -> . FUNC
    (8) Comando -> . MAINF
    (15) ExprR -> . Expr < Expr
    (16) ExprR -> . Expr > Expr
    (17) ExprR -> . Expr < = Expr
    (18) ExprR -> . Expr > = Expr
    (19) ExprR -> . Expr EQUALS Expr
    (20) ExprR -> . Expr NOTEQUALS Expr
    (23) ExprR -> . Expr
    (31) Declaracao -> . INT id
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )
    (53) FUNC -> . DEF NOME ( ARGS ) { Operacoes }
    (54) FUNC -> . DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE }
    (59) MAINF -> . DEF MAIN ( ) { Operacoes }
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    INT             shift and go to state 10
    NOME            shift and go to state 18
    id              shift and go to state 11
    DEF             shift and go to state 20
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    num             shift and go to state 28
    -               shift and go to state 22
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Comando                        shift and go to state 31
    ExprR                          shift and go to state 3
    Declaracao                     shift and go to state 4
    Operacao                       shift and go to state 5
    Atribuicao                     shift and go to state 6
    FUNC                           shift and go to state 7
    MAINF                          shift and go to state 8
    Expr                           shift and go to state 9
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 2

    (1) Comandos -> Comando .

    INT             reduce using rule 1 (Comandos -> Comando .)
    NOME            reduce using rule 1 (Comandos -> Comando .)
    id              reduce using rule 1 (Comandos -> Comando .)
    DEF             reduce using rule 1 (Comandos -> Comando .)
    IF              reduce using rule 1 (Comandos -> Comando .)
    FOR             reduce using rule 1 (Comandos -> Comando .)
    PRINT           reduce using rule 1 (Comandos -> Comando .)
    SCAN            reduce using rule 1 (Comandos -> Comando .)
    num             reduce using rule 1 (Comandos -> Comando .)
    -               reduce using rule 1 (Comandos -> Comando .)
    TRUE            reduce using rule 1 (Comandos -> Comando .)
    FALSE           reduce using rule 1 (Comandos -> Comando .)
    (               reduce using rule 1 (Comandos -> Comando .)
    $end            reduce using rule 1 (Comandos -> Comando .)


state 3

    (3) Comando -> ExprR .

    INT             reduce using rule 3 (Comando -> ExprR .)
    NOME            reduce using rule 3 (Comando -> ExprR .)
    id              reduce using rule 3 (Comando -> ExprR .)
    DEF             reduce using rule 3 (Comando -> ExprR .)
    IF              reduce using rule 3 (Comando -> ExprR .)
    FOR             reduce using rule 3 (Comando -> ExprR .)
    PRINT           reduce using rule 3 (Comando -> ExprR .)
    SCAN            reduce using rule 3 (Comando -> ExprR .)
    num             reduce using rule 3 (Comando -> ExprR .)
    -               reduce using rule 3 (Comando -> ExprR .)
    TRUE            reduce using rule 3 (Comando -> ExprR .)
    FALSE           reduce using rule 3 (Comando -> ExprR .)
    (               reduce using rule 3 (Comando -> ExprR .)
    $end            reduce using rule 3 (Comando -> ExprR .)


state 4

    (4) Comando -> Declaracao .

    INT             reduce using rule 4 (Comando -> Declaracao .)
    NOME            reduce using rule 4 (Comando -> Declaracao .)
    id              reduce using rule 4 (Comando -> Declaracao .)
    DEF             reduce using rule 4 (Comando -> Declaracao .)
    IF              reduce using rule 4 (Comando -> Declaracao .)
    FOR             reduce using rule 4 (Comando -> Declaracao .)
    PRINT           reduce using rule 4 (Comando -> Declaracao .)
    SCAN            reduce using rule 4 (Comando -> Declaracao .)
    num             reduce using rule 4 (Comando -> Declaracao .)
    -               reduce using rule 4 (Comando -> Declaracao .)
    TRUE            reduce using rule 4 (Comando -> Declaracao .)
    FALSE           reduce using rule 4 (Comando -> Declaracao .)
    (               reduce using rule 4 (Comando -> Declaracao .)
    $end            reduce using rule 4 (Comando -> Declaracao .)


state 5

    (5) Comando -> Operacao .

    INT             reduce using rule 5 (Comando -> Operacao .)
    NOME            reduce using rule 5 (Comando -> Operacao .)
    id              reduce using rule 5 (Comando -> Operacao .)
    DEF             reduce using rule 5 (Comando -> Operacao .)
    IF              reduce using rule 5 (Comando -> Operacao .)
    FOR             reduce using rule 5 (Comando -> Operacao .)
    PRINT           reduce using rule 5 (Comando -> Operacao .)
    SCAN            reduce using rule 5 (Comando -> Operacao .)
    num             reduce using rule 5 (Comando -> Operacao .)
    -               reduce using rule 5 (Comando -> Operacao .)
    TRUE            reduce using rule 5 (Comando -> Operacao .)
    FALSE           reduce using rule 5 (Comando -> Operacao .)
    (               reduce using rule 5 (Comando -> Operacao .)
    $end            reduce using rule 5 (Comando -> Operacao .)


state 6

    (6) Comando -> Atribuicao . NEWLINE
    (34) Atribuicoes -> Atribuicao .

    NEWLINE         shift and go to state 32
    id              reduce using rule 34 (Atribuicoes -> Atribuicao .)
    INT             reduce using rule 34 (Atribuicoes -> Atribuicao .)
    NOME            reduce using rule 34 (Atribuicoes -> Atribuicao .)
    DEF             reduce using rule 34 (Atribuicoes -> Atribuicao .)
    IF              reduce using rule 34 (Atribuicoes -> Atribuicao .)
    FOR             reduce using rule 34 (Atribuicoes -> Atribuicao .)
    PRINT           reduce using rule 34 (Atribuicoes -> Atribuicao .)
    SCAN            reduce using rule 34 (Atribuicoes -> Atribuicao .)
    num             reduce using rule 34 (Atribuicoes -> Atribuicao .)
    -               reduce using rule 34 (Atribuicoes -> Atribuicao .)
    TRUE            reduce using rule 34 (Atribuicoes -> Atribuicao .)
    FALSE           reduce using rule 34 (Atribuicoes -> Atribuicao .)
    (               reduce using rule 34 (Atribuicoes -> Atribuicao .)
    $end            reduce using rule 34 (Atribuicoes -> Atribuicao .)


state 7

    (7) Comando -> FUNC .

    INT             reduce using rule 7 (Comando -> FUNC .)
    NOME            reduce using rule 7 (Comando -> FUNC .)
    id              reduce using rule 7 (Comando -> FUNC .)
    DEF             reduce using rule 7 (Comando -> FUNC .)
    IF              reduce using rule 7 (Comando -> FUNC .)
    FOR             reduce using rule 7 (Comando -> FUNC .)
    PRINT           reduce using rule 7 (Comando -> FUNC .)
    SCAN            reduce using rule 7 (Comando -> FUNC .)
    num             reduce using rule 7 (Comando -> FUNC .)
    -               reduce using rule 7 (Comando -> FUNC .)
    TRUE            reduce using rule 7 (Comando -> FUNC .)
    FALSE           reduce using rule 7 (Comando -> FUNC .)
    (               reduce using rule 7 (Comando -> FUNC .)
    $end            reduce using rule 7 (Comando -> FUNC .)


state 8

    (8) Comando -> MAINF .

    INT             reduce using rule 8 (Comando -> MAINF .)
    NOME            reduce using rule 8 (Comando -> MAINF .)
    id              reduce using rule 8 (Comando -> MAINF .)
    DEF             reduce using rule 8 (Comando -> MAINF .)
    IF              reduce using rule 8 (Comando -> MAINF .)
    FOR             reduce using rule 8 (Comando -> MAINF .)
    PRINT           reduce using rule 8 (Comando -> MAINF .)
    SCAN            reduce using rule 8 (Comando -> MAINF .)
    num             reduce using rule 8 (Comando -> MAINF .)
    -               reduce using rule 8 (Comando -> MAINF .)
    TRUE            reduce using rule 8 (Comando -> MAINF .)
    FALSE           reduce using rule 8 (Comando -> MAINF .)
    (               reduce using rule 8 (Comando -> MAINF .)
    $end            reduce using rule 8 (Comando -> MAINF .)


state 9

    (15) ExprR -> Expr . < Expr
    (16) ExprR -> Expr . > Expr
    (17) ExprR -> Expr . < = Expr
    (18) ExprR -> Expr . > = Expr
    (19) ExprR -> Expr . EQUALS Expr
    (20) ExprR -> Expr . NOTEQUALS Expr
    (23) ExprR -> Expr .
    (22) Expr -> Expr . OU Termo
    (25) Expr -> Expr . + Termo
    (26) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    <               shift and go to state 33
    >               shift and go to state 34
    EQUALS          shift and go to state 35
    NOTEQUALS       shift and go to state 36
    INT             reduce using rule 23 (ExprR -> Expr .)
    NOME            reduce using rule 23 (ExprR -> Expr .)
    id              reduce using rule 23 (ExprR -> Expr .)
    DEF             reduce using rule 23 (ExprR -> Expr .)
    IF              reduce using rule 23 (ExprR -> Expr .)
    FOR             reduce using rule 23 (ExprR -> Expr .)
    PRINT           reduce using rule 23 (ExprR -> Expr .)
    SCAN            reduce using rule 23 (ExprR -> Expr .)
    num             reduce using rule 23 (ExprR -> Expr .)
    TRUE            reduce using rule 23 (ExprR -> Expr .)
    FALSE           reduce using rule 23 (ExprR -> Expr .)
    (               reduce using rule 23 (ExprR -> Expr .)
    $end            reduce using rule 23 (ExprR -> Expr .)
    )               reduce using rule 23 (ExprR -> Expr .)
    NEWLINE         reduce using rule 23 (ExprR -> Expr .)
    ,               reduce using rule 23 (ExprR -> Expr .)
    }               reduce using rule 23 (ExprR -> Expr .)
    OU              shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! -               [ reduce using rule 23 (ExprR -> Expr .) ]


state 10

    (31) Declaracao -> INT . id

    id              shift and go to state 40


state 11

    (32) Atribuicao -> id . = ExprR
    (33) Atribuicao -> id . = NOME ( )
    (11) Factor -> id .

    =               shift and go to state 41
    *               reduce using rule 11 (Factor -> id .)
    %               reduce using rule 11 (Factor -> id .)
    /               reduce using rule 11 (Factor -> id .)
    E               reduce using rule 11 (Factor -> id .)
    <               reduce using rule 11 (Factor -> id .)
    >               reduce using rule 11 (Factor -> id .)
    EQUALS          reduce using rule 11 (Factor -> id .)
    NOTEQUALS       reduce using rule 11 (Factor -> id .)
    OU              reduce using rule 11 (Factor -> id .)
    +               reduce using rule 11 (Factor -> id .)
    -               reduce using rule 11 (Factor -> id .)
    INT             reduce using rule 11 (Factor -> id .)
    NOME            reduce using rule 11 (Factor -> id .)
    id              reduce using rule 11 (Factor -> id .)
    DEF             reduce using rule 11 (Factor -> id .)
    IF              reduce using rule 11 (Factor -> id .)
    FOR             reduce using rule 11 (Factor -> id .)
    PRINT           reduce using rule 11 (Factor -> id .)
    SCAN            reduce using rule 11 (Factor -> id .)
    num             reduce using rule 11 (Factor -> id .)
    TRUE            reduce using rule 11 (Factor -> id .)
    FALSE           reduce using rule 11 (Factor -> id .)
    (               reduce using rule 11 (Factor -> id .)
    $end            reduce using rule 11 (Factor -> id .)


state 12

    (39) Operacao -> Atribuicoes .
    (35) Atribuicoes -> Atribuicoes . Atribuicao
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

  ! shift/reduce conflict for id resolved as shift
    INT             reduce using rule 39 (Operacao -> Atribuicoes .)
    NOME            reduce using rule 39 (Operacao -> Atribuicoes .)
    DEF             reduce using rule 39 (Operacao -> Atribuicoes .)
    IF              reduce using rule 39 (Operacao -> Atribuicoes .)
    FOR             reduce using rule 39 (Operacao -> Atribuicoes .)
    PRINT           reduce using rule 39 (Operacao -> Atribuicoes .)
    SCAN            reduce using rule 39 (Operacao -> Atribuicoes .)
    num             reduce using rule 39 (Operacao -> Atribuicoes .)
    -               reduce using rule 39 (Operacao -> Atribuicoes .)
    TRUE            reduce using rule 39 (Operacao -> Atribuicoes .)
    FALSE           reduce using rule 39 (Operacao -> Atribuicoes .)
    (               reduce using rule 39 (Operacao -> Atribuicoes .)
    $end            reduce using rule 39 (Operacao -> Atribuicoes .)
    ,               reduce using rule 39 (Operacao -> Atribuicoes .)
    NEWLINE         reduce using rule 39 (Operacao -> Atribuicoes .)
    }               reduce using rule 39 (Operacao -> Atribuicoes .)
    id              shift and go to state 43

  ! id              [ reduce using rule 39 (Operacao -> Atribuicoes .) ]

    Atribuicao                     shift and go to state 42

state 13

    (40) Operacao -> IFELSE .

    INT             reduce using rule 40 (Operacao -> IFELSE .)
    NOME            reduce using rule 40 (Operacao -> IFELSE .)
    id              reduce using rule 40 (Operacao -> IFELSE .)
    DEF             reduce using rule 40 (Operacao -> IFELSE .)
    IF              reduce using rule 40 (Operacao -> IFELSE .)
    FOR             reduce using rule 40 (Operacao -> IFELSE .)
    PRINT           reduce using rule 40 (Operacao -> IFELSE .)
    SCAN            reduce using rule 40 (Operacao -> IFELSE .)
    num             reduce using rule 40 (Operacao -> IFELSE .)
    -               reduce using rule 40 (Operacao -> IFELSE .)
    TRUE            reduce using rule 40 (Operacao -> IFELSE .)
    FALSE           reduce using rule 40 (Operacao -> IFELSE .)
    (               reduce using rule 40 (Operacao -> IFELSE .)
    $end            reduce using rule 40 (Operacao -> IFELSE .)
    ,               reduce using rule 40 (Operacao -> IFELSE .)
    NEWLINE         reduce using rule 40 (Operacao -> IFELSE .)
    }               reduce using rule 40 (Operacao -> IFELSE .)


state 14

    (41) Operacao -> ONLYIF .

    INT             reduce using rule 41 (Operacao -> ONLYIF .)
    NOME            reduce using rule 41 (Operacao -> ONLYIF .)
    id              reduce using rule 41 (Operacao -> ONLYIF .)
    DEF             reduce using rule 41 (Operacao -> ONLYIF .)
    IF              reduce using rule 41 (Operacao -> ONLYIF .)
    FOR             reduce using rule 41 (Operacao -> ONLYIF .)
    PRINT           reduce using rule 41 (Operacao -> ONLYIF .)
    SCAN            reduce using rule 41 (Operacao -> ONLYIF .)
    num             reduce using rule 41 (Operacao -> ONLYIF .)
    -               reduce using rule 41 (Operacao -> ONLYIF .)
    TRUE            reduce using rule 41 (Operacao -> ONLYIF .)
    FALSE           reduce using rule 41 (Operacao -> ONLYIF .)
    (               reduce using rule 41 (Operacao -> ONLYIF .)
    $end            reduce using rule 41 (Operacao -> ONLYIF .)
    ,               reduce using rule 41 (Operacao -> ONLYIF .)
    NEWLINE         reduce using rule 41 (Operacao -> ONLYIF .)
    }               reduce using rule 41 (Operacao -> ONLYIF .)


state 15

    (42) Operacao -> FORDO .

    INT             reduce using rule 42 (Operacao -> FORDO .)
    NOME            reduce using rule 42 (Operacao -> FORDO .)
    id              reduce using rule 42 (Operacao -> FORDO .)
    DEF             reduce using rule 42 (Operacao -> FORDO .)
    IF              reduce using rule 42 (Operacao -> FORDO .)
    FOR             reduce using rule 42 (Operacao -> FORDO .)
    PRINT           reduce using rule 42 (Operacao -> FORDO .)
    SCAN            reduce using rule 42 (Operacao -> FORDO .)
    num             reduce using rule 42 (Operacao -> FORDO .)
    -               reduce using rule 42 (Operacao -> FORDO .)
    TRUE            reduce using rule 42 (Operacao -> FORDO .)
    FALSE           reduce using rule 42 (Operacao -> FORDO .)
    (               reduce using rule 42 (Operacao -> FORDO .)
    $end            reduce using rule 42 (Operacao -> FORDO .)
    ,               reduce using rule 42 (Operacao -> FORDO .)
    NEWLINE         reduce using rule 42 (Operacao -> FORDO .)
    }               reduce using rule 42 (Operacao -> FORDO .)


state 16

    (43) Operacao -> PRINTER .

    INT             reduce using rule 43 (Operacao -> PRINTER .)
    NOME            reduce using rule 43 (Operacao -> PRINTER .)
    id              reduce using rule 43 (Operacao -> PRINTER .)
    DEF             reduce using rule 43 (Operacao -> PRINTER .)
    IF              reduce using rule 43 (Operacao -> PRINTER .)
    FOR             reduce using rule 43 (Operacao -> PRINTER .)
    PRINT           reduce using rule 43 (Operacao -> PRINTER .)
    SCAN            reduce using rule 43 (Operacao -> PRINTER .)
    num             reduce using rule 43 (Operacao -> PRINTER .)
    -               reduce using rule 43 (Operacao -> PRINTER .)
    TRUE            reduce using rule 43 (Operacao -> PRINTER .)
    FALSE           reduce using rule 43 (Operacao -> PRINTER .)
    (               reduce using rule 43 (Operacao -> PRINTER .)
    $end            reduce using rule 43 (Operacao -> PRINTER .)
    ,               reduce using rule 43 (Operacao -> PRINTER .)
    NEWLINE         reduce using rule 43 (Operacao -> PRINTER .)
    }               reduce using rule 43 (Operacao -> PRINTER .)


state 17

    (44) Operacao -> SCANNER .

    INT             reduce using rule 44 (Operacao -> SCANNER .)
    NOME            reduce using rule 44 (Operacao -> SCANNER .)
    id              reduce using rule 44 (Operacao -> SCANNER .)
    DEF             reduce using rule 44 (Operacao -> SCANNER .)
    IF              reduce using rule 44 (Operacao -> SCANNER .)
    FOR             reduce using rule 44 (Operacao -> SCANNER .)
    PRINT           reduce using rule 44 (Operacao -> SCANNER .)
    SCAN            reduce using rule 44 (Operacao -> SCANNER .)
    num             reduce using rule 44 (Operacao -> SCANNER .)
    -               reduce using rule 44 (Operacao -> SCANNER .)
    TRUE            reduce using rule 44 (Operacao -> SCANNER .)
    FALSE           reduce using rule 44 (Operacao -> SCANNER .)
    (               reduce using rule 44 (Operacao -> SCANNER .)
    $end            reduce using rule 44 (Operacao -> SCANNER .)
    ,               reduce using rule 44 (Operacao -> SCANNER .)
    NEWLINE         reduce using rule 44 (Operacao -> SCANNER .)
    }               reduce using rule 44 (Operacao -> SCANNER .)


state 18

    (45) Operacao -> NOME . ( )

    (               shift and go to state 44


state 19

    (14) Factor -> ( . ExprR )
    (15) ExprR -> . Expr < Expr
    (16) ExprR -> . Expr > Expr
    (17) ExprR -> . Expr < = Expr
    (18) ExprR -> . Expr > = Expr
    (19) ExprR -> . Expr EQUALS Expr
    (20) ExprR -> . Expr NOTEQUALS Expr
    (23) ExprR -> . Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    ExprR                          shift and go to state 45
    Expr                           shift and go to state 9
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 20

    (53) FUNC -> DEF . NOME ( ARGS ) { Operacoes }
    (54) FUNC -> DEF . NOME ( ARGS ) { NEWLINE Operacoes NEWLINE }
    (59) MAINF -> DEF . MAIN ( ) { Operacoes }

    NOME            shift and go to state 47
    MAIN            shift and go to state 48


state 21

    (24) Expr -> Termo .
    (27) Expr -> Termo . * Factor
    (28) Expr -> Termo . % Factor
    (29) Expr -> Termo . / Factor
    (21) Termo -> Termo . E Factor

    <               reduce using rule 24 (Expr -> Termo .)
    >               reduce using rule 24 (Expr -> Termo .)
    EQUALS          reduce using rule 24 (Expr -> Termo .)
    NOTEQUALS       reduce using rule 24 (Expr -> Termo .)
    OU              reduce using rule 24 (Expr -> Termo .)
    +               reduce using rule 24 (Expr -> Termo .)
    -               reduce using rule 24 (Expr -> Termo .)
    INT             reduce using rule 24 (Expr -> Termo .)
    NOME            reduce using rule 24 (Expr -> Termo .)
    id              reduce using rule 24 (Expr -> Termo .)
    DEF             reduce using rule 24 (Expr -> Termo .)
    IF              reduce using rule 24 (Expr -> Termo .)
    FOR             reduce using rule 24 (Expr -> Termo .)
    PRINT           reduce using rule 24 (Expr -> Termo .)
    SCAN            reduce using rule 24 (Expr -> Termo .)
    num             reduce using rule 24 (Expr -> Termo .)
    TRUE            reduce using rule 24 (Expr -> Termo .)
    FALSE           reduce using rule 24 (Expr -> Termo .)
    (               reduce using rule 24 (Expr -> Termo .)
    $end            reduce using rule 24 (Expr -> Termo .)
    )               reduce using rule 24 (Expr -> Termo .)
    NEWLINE         reduce using rule 24 (Expr -> Termo .)
    ,               reduce using rule 24 (Expr -> Termo .)
    }               reduce using rule 24 (Expr -> Termo .)
    *               shift and go to state 49
    %               shift and go to state 50
    /               shift and go to state 51
    E               shift and go to state 52


state 22

    (10) Factor -> - . num

    num             shift and go to state 53


state 23

    (30) Termo -> Factor .

    *               reduce using rule 30 (Termo -> Factor .)
    %               reduce using rule 30 (Termo -> Factor .)
    /               reduce using rule 30 (Termo -> Factor .)
    E               reduce using rule 30 (Termo -> Factor .)
    <               reduce using rule 30 (Termo -> Factor .)
    >               reduce using rule 30 (Termo -> Factor .)
    EQUALS          reduce using rule 30 (Termo -> Factor .)
    NOTEQUALS       reduce using rule 30 (Termo -> Factor .)
    OU              reduce using rule 30 (Termo -> Factor .)
    +               reduce using rule 30 (Termo -> Factor .)
    -               reduce using rule 30 (Termo -> Factor .)
    INT             reduce using rule 30 (Termo -> Factor .)
    NOME            reduce using rule 30 (Termo -> Factor .)
    id              reduce using rule 30 (Termo -> Factor .)
    DEF             reduce using rule 30 (Termo -> Factor .)
    IF              reduce using rule 30 (Termo -> Factor .)
    FOR             reduce using rule 30 (Termo -> Factor .)
    PRINT           reduce using rule 30 (Termo -> Factor .)
    SCAN            reduce using rule 30 (Termo -> Factor .)
    num             reduce using rule 30 (Termo -> Factor .)
    TRUE            reduce using rule 30 (Termo -> Factor .)
    FALSE           reduce using rule 30 (Termo -> Factor .)
    (               reduce using rule 30 (Termo -> Factor .)
    $end            reduce using rule 30 (Termo -> Factor .)
    )               reduce using rule 30 (Termo -> Factor .)
    NEWLINE         reduce using rule 30 (Termo -> Factor .)
    ,               reduce using rule 30 (Termo -> Factor .)
    }               reduce using rule 30 (Termo -> Factor .)


state 24

    (46) IFELSE -> IF . ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> IF . ( ExprR ) { Operacoes }

    (               shift and go to state 54


state 25

    (48) FORDO -> FOR . ( Operacoes , ExprR ) DO { Operacoes }

    (               shift and go to state 55


state 26

    (56) PRINTER -> PRINT . ( TEXTO )
    (57) PRINTER -> PRINT . ( id )

    (               shift and go to state 56


state 27

    (58) SCANNER -> SCAN . ( id )

    (               shift and go to state 57


state 28

    (9) Factor -> num .

    *               reduce using rule 9 (Factor -> num .)
    %               reduce using rule 9 (Factor -> num .)
    /               reduce using rule 9 (Factor -> num .)
    E               reduce using rule 9 (Factor -> num .)
    <               reduce using rule 9 (Factor -> num .)
    >               reduce using rule 9 (Factor -> num .)
    EQUALS          reduce using rule 9 (Factor -> num .)
    NOTEQUALS       reduce using rule 9 (Factor -> num .)
    OU              reduce using rule 9 (Factor -> num .)
    +               reduce using rule 9 (Factor -> num .)
    -               reduce using rule 9 (Factor -> num .)
    INT             reduce using rule 9 (Factor -> num .)
    NOME            reduce using rule 9 (Factor -> num .)
    id              reduce using rule 9 (Factor -> num .)
    DEF             reduce using rule 9 (Factor -> num .)
    IF              reduce using rule 9 (Factor -> num .)
    FOR             reduce using rule 9 (Factor -> num .)
    PRINT           reduce using rule 9 (Factor -> num .)
    SCAN            reduce using rule 9 (Factor -> num .)
    num             reduce using rule 9 (Factor -> num .)
    TRUE            reduce using rule 9 (Factor -> num .)
    FALSE           reduce using rule 9 (Factor -> num .)
    (               reduce using rule 9 (Factor -> num .)
    $end            reduce using rule 9 (Factor -> num .)
    )               reduce using rule 9 (Factor -> num .)
    NEWLINE         reduce using rule 9 (Factor -> num .)
    ,               reduce using rule 9 (Factor -> num .)
    }               reduce using rule 9 (Factor -> num .)


state 29

    (12) Factor -> TRUE .

    *               reduce using rule 12 (Factor -> TRUE .)
    %               reduce using rule 12 (Factor -> TRUE .)
    /               reduce using rule 12 (Factor -> TRUE .)
    E               reduce using rule 12 (Factor -> TRUE .)
    <               reduce using rule 12 (Factor -> TRUE .)
    >               reduce using rule 12 (Factor -> TRUE .)
    EQUALS          reduce using rule 12 (Factor -> TRUE .)
    NOTEQUALS       reduce using rule 12 (Factor -> TRUE .)
    OU              reduce using rule 12 (Factor -> TRUE .)
    +               reduce using rule 12 (Factor -> TRUE .)
    -               reduce using rule 12 (Factor -> TRUE .)
    INT             reduce using rule 12 (Factor -> TRUE .)
    NOME            reduce using rule 12 (Factor -> TRUE .)
    id              reduce using rule 12 (Factor -> TRUE .)
    DEF             reduce using rule 12 (Factor -> TRUE .)
    IF              reduce using rule 12 (Factor -> TRUE .)
    FOR             reduce using rule 12 (Factor -> TRUE .)
    PRINT           reduce using rule 12 (Factor -> TRUE .)
    SCAN            reduce using rule 12 (Factor -> TRUE .)
    num             reduce using rule 12 (Factor -> TRUE .)
    TRUE            reduce using rule 12 (Factor -> TRUE .)
    FALSE           reduce using rule 12 (Factor -> TRUE .)
    (               reduce using rule 12 (Factor -> TRUE .)
    $end            reduce using rule 12 (Factor -> TRUE .)
    )               reduce using rule 12 (Factor -> TRUE .)
    NEWLINE         reduce using rule 12 (Factor -> TRUE .)
    ,               reduce using rule 12 (Factor -> TRUE .)
    }               reduce using rule 12 (Factor -> TRUE .)


state 30

    (13) Factor -> FALSE .

    *               reduce using rule 13 (Factor -> FALSE .)
    %               reduce using rule 13 (Factor -> FALSE .)
    /               reduce using rule 13 (Factor -> FALSE .)
    E               reduce using rule 13 (Factor -> FALSE .)
    <               reduce using rule 13 (Factor -> FALSE .)
    >               reduce using rule 13 (Factor -> FALSE .)
    EQUALS          reduce using rule 13 (Factor -> FALSE .)
    NOTEQUALS       reduce using rule 13 (Factor -> FALSE .)
    OU              reduce using rule 13 (Factor -> FALSE .)
    +               reduce using rule 13 (Factor -> FALSE .)
    -               reduce using rule 13 (Factor -> FALSE .)
    INT             reduce using rule 13 (Factor -> FALSE .)
    NOME            reduce using rule 13 (Factor -> FALSE .)
    id              reduce using rule 13 (Factor -> FALSE .)
    DEF             reduce using rule 13 (Factor -> FALSE .)
    IF              reduce using rule 13 (Factor -> FALSE .)
    FOR             reduce using rule 13 (Factor -> FALSE .)
    PRINT           reduce using rule 13 (Factor -> FALSE .)
    SCAN            reduce using rule 13 (Factor -> FALSE .)
    num             reduce using rule 13 (Factor -> FALSE .)
    TRUE            reduce using rule 13 (Factor -> FALSE .)
    FALSE           reduce using rule 13 (Factor -> FALSE .)
    (               reduce using rule 13 (Factor -> FALSE .)
    $end            reduce using rule 13 (Factor -> FALSE .)
    )               reduce using rule 13 (Factor -> FALSE .)
    NEWLINE         reduce using rule 13 (Factor -> FALSE .)
    ,               reduce using rule 13 (Factor -> FALSE .)
    }               reduce using rule 13 (Factor -> FALSE .)


state 31

    (2) Comandos -> Comandos Comando .

    INT             reduce using rule 2 (Comandos -> Comandos Comando .)
    NOME            reduce using rule 2 (Comandos -> Comandos Comando .)
    id              reduce using rule 2 (Comandos -> Comandos Comando .)
    DEF             reduce using rule 2 (Comandos -> Comandos Comando .)
    IF              reduce using rule 2 (Comandos -> Comandos Comando .)
    FOR             reduce using rule 2 (Comandos -> Comandos Comando .)
    PRINT           reduce using rule 2 (Comandos -> Comandos Comando .)
    SCAN            reduce using rule 2 (Comandos -> Comandos Comando .)
    num             reduce using rule 2 (Comandos -> Comandos Comando .)
    -               reduce using rule 2 (Comandos -> Comandos Comando .)
    TRUE            reduce using rule 2 (Comandos -> Comandos Comando .)
    FALSE           reduce using rule 2 (Comandos -> Comandos Comando .)
    (               reduce using rule 2 (Comandos -> Comandos Comando .)
    $end            reduce using rule 2 (Comandos -> Comandos Comando .)


state 32

    (6) Comando -> Atribuicao NEWLINE .

    INT             reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    NOME            reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    id              reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    DEF             reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    IF              reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    FOR             reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    PRINT           reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    SCAN            reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    num             reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    -               reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    TRUE            reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    FALSE           reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    (               reduce using rule 6 (Comando -> Atribuicao NEWLINE .)
    $end            reduce using rule 6 (Comando -> Atribuicao NEWLINE .)


state 33

    (15) ExprR -> Expr < . Expr
    (17) ExprR -> Expr < . = Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    =               shift and go to state 59
    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Expr                           shift and go to state 58
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 34

    (16) ExprR -> Expr > . Expr
    (18) ExprR -> Expr > . = Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    =               shift and go to state 61
    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Expr                           shift and go to state 60
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 35

    (19) ExprR -> Expr EQUALS . Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Expr                           shift and go to state 62
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 36

    (20) ExprR -> Expr NOTEQUALS . Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Expr                           shift and go to state 63
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 37

    (22) Expr -> Expr OU . Termo
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Termo                          shift and go to state 64
    Factor                         shift and go to state 23

state 38

    (25) Expr -> Expr + . Termo
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Termo                          shift and go to state 65
    Factor                         shift and go to state 23

state 39

    (26) Expr -> Expr - . Termo
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Termo                          shift and go to state 66
    Factor                         shift and go to state 23

state 40

    (31) Declaracao -> INT id .

    INT             reduce using rule 31 (Declaracao -> INT id .)
    NOME            reduce using rule 31 (Declaracao -> INT id .)
    id              reduce using rule 31 (Declaracao -> INT id .)
    DEF             reduce using rule 31 (Declaracao -> INT id .)
    IF              reduce using rule 31 (Declaracao -> INT id .)
    FOR             reduce using rule 31 (Declaracao -> INT id .)
    PRINT           reduce using rule 31 (Declaracao -> INT id .)
    SCAN            reduce using rule 31 (Declaracao -> INT id .)
    num             reduce using rule 31 (Declaracao -> INT id .)
    -               reduce using rule 31 (Declaracao -> INT id .)
    TRUE            reduce using rule 31 (Declaracao -> INT id .)
    FALSE           reduce using rule 31 (Declaracao -> INT id .)
    (               reduce using rule 31 (Declaracao -> INT id .)
    $end            reduce using rule 31 (Declaracao -> INT id .)


state 41

    (32) Atribuicao -> id = . ExprR
    (33) Atribuicao -> id = . NOME ( )
    (15) ExprR -> . Expr < Expr
    (16) ExprR -> . Expr > Expr
    (17) ExprR -> . Expr < = Expr
    (18) ExprR -> . Expr > = Expr
    (19) ExprR -> . Expr EQUALS Expr
    (20) ExprR -> . Expr NOTEQUALS Expr
    (23) ExprR -> . Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    NOME            shift and go to state 68
    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    ExprR                          shift and go to state 67
    Expr                           shift and go to state 9
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 42

    (35) Atribuicoes -> Atribuicoes Atribuicao .

    id              reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    INT             reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    NOME            reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    DEF             reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    IF              reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    FOR             reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    PRINT           reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    SCAN            reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    num             reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    -               reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    TRUE            reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    FALSE           reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    (               reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    $end            reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    ,               reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    NEWLINE         reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)
    }               reduce using rule 35 (Atribuicoes -> Atribuicoes Atribuicao .)


state 43

    (32) Atribuicao -> id . = ExprR
    (33) Atribuicao -> id . = NOME ( )

    =               shift and go to state 41


state 44

    (45) Operacao -> NOME ( . )

    )               shift and go to state 69


state 45

    (14) Factor -> ( ExprR . )

    )               shift and go to state 70


state 46

    (11) Factor -> id .

    *               reduce using rule 11 (Factor -> id .)
    %               reduce using rule 11 (Factor -> id .)
    /               reduce using rule 11 (Factor -> id .)
    E               reduce using rule 11 (Factor -> id .)
    <               reduce using rule 11 (Factor -> id .)
    >               reduce using rule 11 (Factor -> id .)
    EQUALS          reduce using rule 11 (Factor -> id .)
    NOTEQUALS       reduce using rule 11 (Factor -> id .)
    OU              reduce using rule 11 (Factor -> id .)
    +               reduce using rule 11 (Factor -> id .)
    -               reduce using rule 11 (Factor -> id .)
    )               reduce using rule 11 (Factor -> id .)
    INT             reduce using rule 11 (Factor -> id .)
    NOME            reduce using rule 11 (Factor -> id .)
    id              reduce using rule 11 (Factor -> id .)
    DEF             reduce using rule 11 (Factor -> id .)
    IF              reduce using rule 11 (Factor -> id .)
    FOR             reduce using rule 11 (Factor -> id .)
    PRINT           reduce using rule 11 (Factor -> id .)
    SCAN            reduce using rule 11 (Factor -> id .)
    num             reduce using rule 11 (Factor -> id .)
    TRUE            reduce using rule 11 (Factor -> id .)
    FALSE           reduce using rule 11 (Factor -> id .)
    (               reduce using rule 11 (Factor -> id .)
    $end            reduce using rule 11 (Factor -> id .)
    NEWLINE         reduce using rule 11 (Factor -> id .)
    ,               reduce using rule 11 (Factor -> id .)
    }               reduce using rule 11 (Factor -> id .)


state 47

    (53) FUNC -> DEF NOME . ( ARGS ) { Operacoes }
    (54) FUNC -> DEF NOME . ( ARGS ) { NEWLINE Operacoes NEWLINE }

    (               shift and go to state 71


state 48

    (59) MAINF -> DEF MAIN . ( ) { Operacoes }

    (               shift and go to state 72


state 49

    (27) Expr -> Termo * . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Factor                         shift and go to state 73

state 50

    (28) Expr -> Termo % . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Factor                         shift and go to state 74

state 51

    (29) Expr -> Termo / . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Factor                         shift and go to state 75

state 52

    (21) Termo -> Termo E . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Factor                         shift and go to state 76

state 53

    (10) Factor -> - num .

    *               reduce using rule 10 (Factor -> - num .)
    %               reduce using rule 10 (Factor -> - num .)
    /               reduce using rule 10 (Factor -> - num .)
    E               reduce using rule 10 (Factor -> - num .)
    <               reduce using rule 10 (Factor -> - num .)
    >               reduce using rule 10 (Factor -> - num .)
    EQUALS          reduce using rule 10 (Factor -> - num .)
    NOTEQUALS       reduce using rule 10 (Factor -> - num .)
    OU              reduce using rule 10 (Factor -> - num .)
    +               reduce using rule 10 (Factor -> - num .)
    -               reduce using rule 10 (Factor -> - num .)
    INT             reduce using rule 10 (Factor -> - num .)
    NOME            reduce using rule 10 (Factor -> - num .)
    id              reduce using rule 10 (Factor -> - num .)
    DEF             reduce using rule 10 (Factor -> - num .)
    IF              reduce using rule 10 (Factor -> - num .)
    FOR             reduce using rule 10 (Factor -> - num .)
    PRINT           reduce using rule 10 (Factor -> - num .)
    SCAN            reduce using rule 10 (Factor -> - num .)
    num             reduce using rule 10 (Factor -> - num .)
    TRUE            reduce using rule 10 (Factor -> - num .)
    FALSE           reduce using rule 10 (Factor -> - num .)
    (               reduce using rule 10 (Factor -> - num .)
    $end            reduce using rule 10 (Factor -> - num .)
    )               reduce using rule 10 (Factor -> - num .)
    NEWLINE         reduce using rule 10 (Factor -> - num .)
    ,               reduce using rule 10 (Factor -> - num .)
    }               reduce using rule 10 (Factor -> - num .)


state 54

    (46) IFELSE -> IF ( . ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> IF ( . ExprR ) { Operacoes }
    (15) ExprR -> . Expr < Expr
    (16) ExprR -> . Expr > Expr
    (17) ExprR -> . Expr < = Expr
    (18) ExprR -> . Expr > = Expr
    (19) ExprR -> . Expr EQUALS Expr
    (20) ExprR -> . Expr NOTEQUALS Expr
    (23) ExprR -> . Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    ExprR                          shift and go to state 77
    Expr                           shift and go to state 9
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 55

    (48) FORDO -> FOR ( . Operacoes , ExprR ) DO { Operacoes }
    (36) Operacoes -> . Operacao
    (37) Operacoes -> . Operacoes Operacao
    (38) Operacoes -> . Operacoes NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacoes                      shift and go to state 78
    Operacao                       shift and go to state 79
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 56

    (56) PRINTER -> PRINT ( . TEXTO )
    (57) PRINTER -> PRINT ( . id )
    (55) TEXTO -> . TEXT

    id              shift and go to state 82
    TEXT            shift and go to state 83

    TEXTO                          shift and go to state 81

state 57

    (58) SCANNER -> SCAN ( . id )

    id              shift and go to state 84


state 58

    (15) ExprR -> Expr < Expr .
    (22) Expr -> Expr . OU Termo
    (25) Expr -> Expr . + Termo
    (26) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 15 (ExprR -> Expr < Expr .)
    NOME            reduce using rule 15 (ExprR -> Expr < Expr .)
    id              reduce using rule 15 (ExprR -> Expr < Expr .)
    DEF             reduce using rule 15 (ExprR -> Expr < Expr .)
    IF              reduce using rule 15 (ExprR -> Expr < Expr .)
    FOR             reduce using rule 15 (ExprR -> Expr < Expr .)
    PRINT           reduce using rule 15 (ExprR -> Expr < Expr .)
    SCAN            reduce using rule 15 (ExprR -> Expr < Expr .)
    num             reduce using rule 15 (ExprR -> Expr < Expr .)
    TRUE            reduce using rule 15 (ExprR -> Expr < Expr .)
    FALSE           reduce using rule 15 (ExprR -> Expr < Expr .)
    (               reduce using rule 15 (ExprR -> Expr < Expr .)
    $end            reduce using rule 15 (ExprR -> Expr < Expr .)
    )               reduce using rule 15 (ExprR -> Expr < Expr .)
    NEWLINE         reduce using rule 15 (ExprR -> Expr < Expr .)
    ,               reduce using rule 15 (ExprR -> Expr < Expr .)
    }               reduce using rule 15 (ExprR -> Expr < Expr .)
    OU              shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! -               [ reduce using rule 15 (ExprR -> Expr < Expr .) ]


state 59

    (17) ExprR -> Expr < = . Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Expr                           shift and go to state 85
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 60

    (16) ExprR -> Expr > Expr .
    (22) Expr -> Expr . OU Termo
    (25) Expr -> Expr . + Termo
    (26) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 16 (ExprR -> Expr > Expr .)
    NOME            reduce using rule 16 (ExprR -> Expr > Expr .)
    id              reduce using rule 16 (ExprR -> Expr > Expr .)
    DEF             reduce using rule 16 (ExprR -> Expr > Expr .)
    IF              reduce using rule 16 (ExprR -> Expr > Expr .)
    FOR             reduce using rule 16 (ExprR -> Expr > Expr .)
    PRINT           reduce using rule 16 (ExprR -> Expr > Expr .)
    SCAN            reduce using rule 16 (ExprR -> Expr > Expr .)
    num             reduce using rule 16 (ExprR -> Expr > Expr .)
    TRUE            reduce using rule 16 (ExprR -> Expr > Expr .)
    FALSE           reduce using rule 16 (ExprR -> Expr > Expr .)
    (               reduce using rule 16 (ExprR -> Expr > Expr .)
    $end            reduce using rule 16 (ExprR -> Expr > Expr .)
    )               reduce using rule 16 (ExprR -> Expr > Expr .)
    NEWLINE         reduce using rule 16 (ExprR -> Expr > Expr .)
    ,               reduce using rule 16 (ExprR -> Expr > Expr .)
    }               reduce using rule 16 (ExprR -> Expr > Expr .)
    OU              shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! -               [ reduce using rule 16 (ExprR -> Expr > Expr .) ]


state 61

    (18) ExprR -> Expr > = . Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    Expr                           shift and go to state 86
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 62

    (19) ExprR -> Expr EQUALS Expr .
    (22) Expr -> Expr . OU Termo
    (25) Expr -> Expr . + Termo
    (26) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    NOME            reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    id              reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    DEF             reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    IF              reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    FOR             reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    PRINT           reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    SCAN            reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    num             reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    TRUE            reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    FALSE           reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    (               reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    $end            reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    )               reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    NEWLINE         reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    ,               reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    }               reduce using rule 19 (ExprR -> Expr EQUALS Expr .)
    OU              shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! -               [ reduce using rule 19 (ExprR -> Expr EQUALS Expr .) ]


state 63

    (20) ExprR -> Expr NOTEQUALS Expr .
    (22) Expr -> Expr . OU Termo
    (25) Expr -> Expr . + Termo
    (26) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    NOME            reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    id              reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    DEF             reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    IF              reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    FOR             reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    PRINT           reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    SCAN            reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    num             reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    TRUE            reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    FALSE           reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    (               reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    $end            reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    )               reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    NEWLINE         reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    ,               reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    }               reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .)
    OU              shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! -               [ reduce using rule 20 (ExprR -> Expr NOTEQUALS Expr .) ]


state 64

    (22) Expr -> Expr OU Termo .
    (21) Termo -> Termo . E Factor

    <               reduce using rule 22 (Expr -> Expr OU Termo .)
    >               reduce using rule 22 (Expr -> Expr OU Termo .)
    EQUALS          reduce using rule 22 (Expr -> Expr OU Termo .)
    NOTEQUALS       reduce using rule 22 (Expr -> Expr OU Termo .)
    OU              reduce using rule 22 (Expr -> Expr OU Termo .)
    +               reduce using rule 22 (Expr -> Expr OU Termo .)
    -               reduce using rule 22 (Expr -> Expr OU Termo .)
    INT             reduce using rule 22 (Expr -> Expr OU Termo .)
    NOME            reduce using rule 22 (Expr -> Expr OU Termo .)
    id              reduce using rule 22 (Expr -> Expr OU Termo .)
    DEF             reduce using rule 22 (Expr -> Expr OU Termo .)
    IF              reduce using rule 22 (Expr -> Expr OU Termo .)
    FOR             reduce using rule 22 (Expr -> Expr OU Termo .)
    PRINT           reduce using rule 22 (Expr -> Expr OU Termo .)
    SCAN            reduce using rule 22 (Expr -> Expr OU Termo .)
    num             reduce using rule 22 (Expr -> Expr OU Termo .)
    TRUE            reduce using rule 22 (Expr -> Expr OU Termo .)
    FALSE           reduce using rule 22 (Expr -> Expr OU Termo .)
    (               reduce using rule 22 (Expr -> Expr OU Termo .)
    $end            reduce using rule 22 (Expr -> Expr OU Termo .)
    )               reduce using rule 22 (Expr -> Expr OU Termo .)
    NEWLINE         reduce using rule 22 (Expr -> Expr OU Termo .)
    ,               reduce using rule 22 (Expr -> Expr OU Termo .)
    }               reduce using rule 22 (Expr -> Expr OU Termo .)
    E               shift and go to state 52


state 65

    (25) Expr -> Expr + Termo .
    (21) Termo -> Termo . E Factor

    <               reduce using rule 25 (Expr -> Expr + Termo .)
    >               reduce using rule 25 (Expr -> Expr + Termo .)
    EQUALS          reduce using rule 25 (Expr -> Expr + Termo .)
    NOTEQUALS       reduce using rule 25 (Expr -> Expr + Termo .)
    OU              reduce using rule 25 (Expr -> Expr + Termo .)
    +               reduce using rule 25 (Expr -> Expr + Termo .)
    -               reduce using rule 25 (Expr -> Expr + Termo .)
    INT             reduce using rule 25 (Expr -> Expr + Termo .)
    NOME            reduce using rule 25 (Expr -> Expr + Termo .)
    id              reduce using rule 25 (Expr -> Expr + Termo .)
    DEF             reduce using rule 25 (Expr -> Expr + Termo .)
    IF              reduce using rule 25 (Expr -> Expr + Termo .)
    FOR             reduce using rule 25 (Expr -> Expr + Termo .)
    PRINT           reduce using rule 25 (Expr -> Expr + Termo .)
    SCAN            reduce using rule 25 (Expr -> Expr + Termo .)
    num             reduce using rule 25 (Expr -> Expr + Termo .)
    TRUE            reduce using rule 25 (Expr -> Expr + Termo .)
    FALSE           reduce using rule 25 (Expr -> Expr + Termo .)
    (               reduce using rule 25 (Expr -> Expr + Termo .)
    $end            reduce using rule 25 (Expr -> Expr + Termo .)
    )               reduce using rule 25 (Expr -> Expr + Termo .)
    NEWLINE         reduce using rule 25 (Expr -> Expr + Termo .)
    ,               reduce using rule 25 (Expr -> Expr + Termo .)
    }               reduce using rule 25 (Expr -> Expr + Termo .)
    E               shift and go to state 52


state 66

    (26) Expr -> Expr - Termo .
    (21) Termo -> Termo . E Factor

    <               reduce using rule 26 (Expr -> Expr - Termo .)
    >               reduce using rule 26 (Expr -> Expr - Termo .)
    EQUALS          reduce using rule 26 (Expr -> Expr - Termo .)
    NOTEQUALS       reduce using rule 26 (Expr -> Expr - Termo .)
    OU              reduce using rule 26 (Expr -> Expr - Termo .)
    +               reduce using rule 26 (Expr -> Expr - Termo .)
    -               reduce using rule 26 (Expr -> Expr - Termo .)
    INT             reduce using rule 26 (Expr -> Expr - Termo .)
    NOME            reduce using rule 26 (Expr -> Expr - Termo .)
    id              reduce using rule 26 (Expr -> Expr - Termo .)
    DEF             reduce using rule 26 (Expr -> Expr - Termo .)
    IF              reduce using rule 26 (Expr -> Expr - Termo .)
    FOR             reduce using rule 26 (Expr -> Expr - Termo .)
    PRINT           reduce using rule 26 (Expr -> Expr - Termo .)
    SCAN            reduce using rule 26 (Expr -> Expr - Termo .)
    num             reduce using rule 26 (Expr -> Expr - Termo .)
    TRUE            reduce using rule 26 (Expr -> Expr - Termo .)
    FALSE           reduce using rule 26 (Expr -> Expr - Termo .)
    (               reduce using rule 26 (Expr -> Expr - Termo .)
    $end            reduce using rule 26 (Expr -> Expr - Termo .)
    )               reduce using rule 26 (Expr -> Expr - Termo .)
    NEWLINE         reduce using rule 26 (Expr -> Expr - Termo .)
    ,               reduce using rule 26 (Expr -> Expr - Termo .)
    }               reduce using rule 26 (Expr -> Expr - Termo .)
    E               shift and go to state 52


state 67

    (32) Atribuicao -> id = ExprR .

    NEWLINE         reduce using rule 32 (Atribuicao -> id = ExprR .)
    id              reduce using rule 32 (Atribuicao -> id = ExprR .)
    INT             reduce using rule 32 (Atribuicao -> id = ExprR .)
    NOME            reduce using rule 32 (Atribuicao -> id = ExprR .)
    DEF             reduce using rule 32 (Atribuicao -> id = ExprR .)
    IF              reduce using rule 32 (Atribuicao -> id = ExprR .)
    FOR             reduce using rule 32 (Atribuicao -> id = ExprR .)
    PRINT           reduce using rule 32 (Atribuicao -> id = ExprR .)
    SCAN            reduce using rule 32 (Atribuicao -> id = ExprR .)
    num             reduce using rule 32 (Atribuicao -> id = ExprR .)
    -               reduce using rule 32 (Atribuicao -> id = ExprR .)
    TRUE            reduce using rule 32 (Atribuicao -> id = ExprR .)
    FALSE           reduce using rule 32 (Atribuicao -> id = ExprR .)
    (               reduce using rule 32 (Atribuicao -> id = ExprR .)
    $end            reduce using rule 32 (Atribuicao -> id = ExprR .)
    ,               reduce using rule 32 (Atribuicao -> id = ExprR .)
    }               reduce using rule 32 (Atribuicao -> id = ExprR .)


state 68

    (33) Atribuicao -> id = NOME . ( )

    (               shift and go to state 87


state 69

    (45) Operacao -> NOME ( ) .

    INT             reduce using rule 45 (Operacao -> NOME ( ) .)
    NOME            reduce using rule 45 (Operacao -> NOME ( ) .)
    id              reduce using rule 45 (Operacao -> NOME ( ) .)
    DEF             reduce using rule 45 (Operacao -> NOME ( ) .)
    IF              reduce using rule 45 (Operacao -> NOME ( ) .)
    FOR             reduce using rule 45 (Operacao -> NOME ( ) .)
    PRINT           reduce using rule 45 (Operacao -> NOME ( ) .)
    SCAN            reduce using rule 45 (Operacao -> NOME ( ) .)
    num             reduce using rule 45 (Operacao -> NOME ( ) .)
    -               reduce using rule 45 (Operacao -> NOME ( ) .)
    TRUE            reduce using rule 45 (Operacao -> NOME ( ) .)
    FALSE           reduce using rule 45 (Operacao -> NOME ( ) .)
    (               reduce using rule 45 (Operacao -> NOME ( ) .)
    $end            reduce using rule 45 (Operacao -> NOME ( ) .)
    ,               reduce using rule 45 (Operacao -> NOME ( ) .)
    NEWLINE         reduce using rule 45 (Operacao -> NOME ( ) .)
    }               reduce using rule 45 (Operacao -> NOME ( ) .)


state 70

    (14) Factor -> ( ExprR ) .

    *               reduce using rule 14 (Factor -> ( ExprR ) .)
    %               reduce using rule 14 (Factor -> ( ExprR ) .)
    /               reduce using rule 14 (Factor -> ( ExprR ) .)
    E               reduce using rule 14 (Factor -> ( ExprR ) .)
    <               reduce using rule 14 (Factor -> ( ExprR ) .)
    >               reduce using rule 14 (Factor -> ( ExprR ) .)
    EQUALS          reduce using rule 14 (Factor -> ( ExprR ) .)
    NOTEQUALS       reduce using rule 14 (Factor -> ( ExprR ) .)
    OU              reduce using rule 14 (Factor -> ( ExprR ) .)
    +               reduce using rule 14 (Factor -> ( ExprR ) .)
    -               reduce using rule 14 (Factor -> ( ExprR ) .)
    INT             reduce using rule 14 (Factor -> ( ExprR ) .)
    NOME            reduce using rule 14 (Factor -> ( ExprR ) .)
    id              reduce using rule 14 (Factor -> ( ExprR ) .)
    DEF             reduce using rule 14 (Factor -> ( ExprR ) .)
    IF              reduce using rule 14 (Factor -> ( ExprR ) .)
    FOR             reduce using rule 14 (Factor -> ( ExprR ) .)
    PRINT           reduce using rule 14 (Factor -> ( ExprR ) .)
    SCAN            reduce using rule 14 (Factor -> ( ExprR ) .)
    num             reduce using rule 14 (Factor -> ( ExprR ) .)
    TRUE            reduce using rule 14 (Factor -> ( ExprR ) .)
    FALSE           reduce using rule 14 (Factor -> ( ExprR ) .)
    (               reduce using rule 14 (Factor -> ( ExprR ) .)
    $end            reduce using rule 14 (Factor -> ( ExprR ) .)
    )               reduce using rule 14 (Factor -> ( ExprR ) .)
    NEWLINE         reduce using rule 14 (Factor -> ( ExprR ) .)
    ,               reduce using rule 14 (Factor -> ( ExprR ) .)
    }               reduce using rule 14 (Factor -> ( ExprR ) .)


state 71

    (53) FUNC -> DEF NOME ( . ARGS ) { Operacoes }
    (54) FUNC -> DEF NOME ( . ARGS ) { NEWLINE Operacoes NEWLINE }
    (49) ARGS -> . ARG
    (52) ARGS -> . ARGS , ARG
    (50) ARG -> .
    (51) ARG -> . id

    )               reduce using rule 50 (ARG -> .)
    ,               reduce using rule 50 (ARG -> .)
    id              shift and go to state 90

    ARGS                           shift and go to state 88
    ARG                            shift and go to state 89

state 72

    (59) MAINF -> DEF MAIN ( . ) { Operacoes }

    )               shift and go to state 91


state 73

    (27) Expr -> Termo * Factor .

    <               reduce using rule 27 (Expr -> Termo * Factor .)
    >               reduce using rule 27 (Expr -> Termo * Factor .)
    EQUALS          reduce using rule 27 (Expr -> Termo * Factor .)
    NOTEQUALS       reduce using rule 27 (Expr -> Termo * Factor .)
    OU              reduce using rule 27 (Expr -> Termo * Factor .)
    +               reduce using rule 27 (Expr -> Termo * Factor .)
    -               reduce using rule 27 (Expr -> Termo * Factor .)
    INT             reduce using rule 27 (Expr -> Termo * Factor .)
    NOME            reduce using rule 27 (Expr -> Termo * Factor .)
    id              reduce using rule 27 (Expr -> Termo * Factor .)
    DEF             reduce using rule 27 (Expr -> Termo * Factor .)
    IF              reduce using rule 27 (Expr -> Termo * Factor .)
    FOR             reduce using rule 27 (Expr -> Termo * Factor .)
    PRINT           reduce using rule 27 (Expr -> Termo * Factor .)
    SCAN            reduce using rule 27 (Expr -> Termo * Factor .)
    num             reduce using rule 27 (Expr -> Termo * Factor .)
    TRUE            reduce using rule 27 (Expr -> Termo * Factor .)
    FALSE           reduce using rule 27 (Expr -> Termo * Factor .)
    (               reduce using rule 27 (Expr -> Termo * Factor .)
    $end            reduce using rule 27 (Expr -> Termo * Factor .)
    )               reduce using rule 27 (Expr -> Termo * Factor .)
    NEWLINE         reduce using rule 27 (Expr -> Termo * Factor .)
    ,               reduce using rule 27 (Expr -> Termo * Factor .)
    }               reduce using rule 27 (Expr -> Termo * Factor .)


state 74

    (28) Expr -> Termo % Factor .

    <               reduce using rule 28 (Expr -> Termo % Factor .)
    >               reduce using rule 28 (Expr -> Termo % Factor .)
    EQUALS          reduce using rule 28 (Expr -> Termo % Factor .)
    NOTEQUALS       reduce using rule 28 (Expr -> Termo % Factor .)
    OU              reduce using rule 28 (Expr -> Termo % Factor .)
    +               reduce using rule 28 (Expr -> Termo % Factor .)
    -               reduce using rule 28 (Expr -> Termo % Factor .)
    INT             reduce using rule 28 (Expr -> Termo % Factor .)
    NOME            reduce using rule 28 (Expr -> Termo % Factor .)
    id              reduce using rule 28 (Expr -> Termo % Factor .)
    DEF             reduce using rule 28 (Expr -> Termo % Factor .)
    IF              reduce using rule 28 (Expr -> Termo % Factor .)
    FOR             reduce using rule 28 (Expr -> Termo % Factor .)
    PRINT           reduce using rule 28 (Expr -> Termo % Factor .)
    SCAN            reduce using rule 28 (Expr -> Termo % Factor .)
    num             reduce using rule 28 (Expr -> Termo % Factor .)
    TRUE            reduce using rule 28 (Expr -> Termo % Factor .)
    FALSE           reduce using rule 28 (Expr -> Termo % Factor .)
    (               reduce using rule 28 (Expr -> Termo % Factor .)
    $end            reduce using rule 28 (Expr -> Termo % Factor .)
    )               reduce using rule 28 (Expr -> Termo % Factor .)
    NEWLINE         reduce using rule 28 (Expr -> Termo % Factor .)
    ,               reduce using rule 28 (Expr -> Termo % Factor .)
    }               reduce using rule 28 (Expr -> Termo % Factor .)


state 75

    (29) Expr -> Termo / Factor .

    <               reduce using rule 29 (Expr -> Termo / Factor .)
    >               reduce using rule 29 (Expr -> Termo / Factor .)
    EQUALS          reduce using rule 29 (Expr -> Termo / Factor .)
    NOTEQUALS       reduce using rule 29 (Expr -> Termo / Factor .)
    OU              reduce using rule 29 (Expr -> Termo / Factor .)
    +               reduce using rule 29 (Expr -> Termo / Factor .)
    -               reduce using rule 29 (Expr -> Termo / Factor .)
    INT             reduce using rule 29 (Expr -> Termo / Factor .)
    NOME            reduce using rule 29 (Expr -> Termo / Factor .)
    id              reduce using rule 29 (Expr -> Termo / Factor .)
    DEF             reduce using rule 29 (Expr -> Termo / Factor .)
    IF              reduce using rule 29 (Expr -> Termo / Factor .)
    FOR             reduce using rule 29 (Expr -> Termo / Factor .)
    PRINT           reduce using rule 29 (Expr -> Termo / Factor .)
    SCAN            reduce using rule 29 (Expr -> Termo / Factor .)
    num             reduce using rule 29 (Expr -> Termo / Factor .)
    TRUE            reduce using rule 29 (Expr -> Termo / Factor .)
    FALSE           reduce using rule 29 (Expr -> Termo / Factor .)
    (               reduce using rule 29 (Expr -> Termo / Factor .)
    $end            reduce using rule 29 (Expr -> Termo / Factor .)
    )               reduce using rule 29 (Expr -> Termo / Factor .)
    NEWLINE         reduce using rule 29 (Expr -> Termo / Factor .)
    ,               reduce using rule 29 (Expr -> Termo / Factor .)
    }               reduce using rule 29 (Expr -> Termo / Factor .)


state 76

    (21) Termo -> Termo E Factor .

    *               reduce using rule 21 (Termo -> Termo E Factor .)
    %               reduce using rule 21 (Termo -> Termo E Factor .)
    /               reduce using rule 21 (Termo -> Termo E Factor .)
    E               reduce using rule 21 (Termo -> Termo E Factor .)
    <               reduce using rule 21 (Termo -> Termo E Factor .)
    >               reduce using rule 21 (Termo -> Termo E Factor .)
    EQUALS          reduce using rule 21 (Termo -> Termo E Factor .)
    NOTEQUALS       reduce using rule 21 (Termo -> Termo E Factor .)
    OU              reduce using rule 21 (Termo -> Termo E Factor .)
    +               reduce using rule 21 (Termo -> Termo E Factor .)
    -               reduce using rule 21 (Termo -> Termo E Factor .)
    INT             reduce using rule 21 (Termo -> Termo E Factor .)
    NOME            reduce using rule 21 (Termo -> Termo E Factor .)
    id              reduce using rule 21 (Termo -> Termo E Factor .)
    DEF             reduce using rule 21 (Termo -> Termo E Factor .)
    IF              reduce using rule 21 (Termo -> Termo E Factor .)
    FOR             reduce using rule 21 (Termo -> Termo E Factor .)
    PRINT           reduce using rule 21 (Termo -> Termo E Factor .)
    SCAN            reduce using rule 21 (Termo -> Termo E Factor .)
    num             reduce using rule 21 (Termo -> Termo E Factor .)
    TRUE            reduce using rule 21 (Termo -> Termo E Factor .)
    FALSE           reduce using rule 21 (Termo -> Termo E Factor .)
    (               reduce using rule 21 (Termo -> Termo E Factor .)
    $end            reduce using rule 21 (Termo -> Termo E Factor .)
    )               reduce using rule 21 (Termo -> Termo E Factor .)
    NEWLINE         reduce using rule 21 (Termo -> Termo E Factor .)
    ,               reduce using rule 21 (Termo -> Termo E Factor .)
    }               reduce using rule 21 (Termo -> Termo E Factor .)


state 77

    (46) IFELSE -> IF ( ExprR . ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> IF ( ExprR . ) { Operacoes }

    )               shift and go to state 92


state 78

    (48) FORDO -> FOR ( Operacoes . , ExprR ) DO { Operacoes }
    (37) Operacoes -> Operacoes . Operacao
    (38) Operacoes -> Operacoes . NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    ,               shift and go to state 93
    NEWLINE         shift and go to state 95
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 94
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 79

    (36) Operacoes -> Operacao .

    ,               reduce using rule 36 (Operacoes -> Operacao .)
    NEWLINE         reduce using rule 36 (Operacoes -> Operacao .)
    NOME            reduce using rule 36 (Operacoes -> Operacao .)
    IF              reduce using rule 36 (Operacoes -> Operacao .)
    FOR             reduce using rule 36 (Operacoes -> Operacao .)
    PRINT           reduce using rule 36 (Operacoes -> Operacao .)
    SCAN            reduce using rule 36 (Operacoes -> Operacao .)
    id              reduce using rule 36 (Operacoes -> Operacao .)
    }               reduce using rule 36 (Operacoes -> Operacao .)


state 80

    (34) Atribuicoes -> Atribuicao .

    id              reduce using rule 34 (Atribuicoes -> Atribuicao .)
    ,               reduce using rule 34 (Atribuicoes -> Atribuicao .)
    NEWLINE         reduce using rule 34 (Atribuicoes -> Atribuicao .)
    NOME            reduce using rule 34 (Atribuicoes -> Atribuicao .)
    IF              reduce using rule 34 (Atribuicoes -> Atribuicao .)
    FOR             reduce using rule 34 (Atribuicoes -> Atribuicao .)
    PRINT           reduce using rule 34 (Atribuicoes -> Atribuicao .)
    SCAN            reduce using rule 34 (Atribuicoes -> Atribuicao .)
    }               reduce using rule 34 (Atribuicoes -> Atribuicao .)


state 81

    (56) PRINTER -> PRINT ( TEXTO . )

    )               shift and go to state 96


state 82

    (57) PRINTER -> PRINT ( id . )

    )               shift and go to state 97


state 83

    (55) TEXTO -> TEXT .

    )               reduce using rule 55 (TEXTO -> TEXT .)


state 84

    (58) SCANNER -> SCAN ( id . )

    )               shift and go to state 98


state 85

    (17) ExprR -> Expr < = Expr .
    (22) Expr -> Expr . OU Termo
    (25) Expr -> Expr . + Termo
    (26) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 17 (ExprR -> Expr < = Expr .)
    NOME            reduce using rule 17 (ExprR -> Expr < = Expr .)
    id              reduce using rule 17 (ExprR -> Expr < = Expr .)
    DEF             reduce using rule 17 (ExprR -> Expr < = Expr .)
    IF              reduce using rule 17 (ExprR -> Expr < = Expr .)
    FOR             reduce using rule 17 (ExprR -> Expr < = Expr .)
    PRINT           reduce using rule 17 (ExprR -> Expr < = Expr .)
    SCAN            reduce using rule 17 (ExprR -> Expr < = Expr .)
    num             reduce using rule 17 (ExprR -> Expr < = Expr .)
    TRUE            reduce using rule 17 (ExprR -> Expr < = Expr .)
    FALSE           reduce using rule 17 (ExprR -> Expr < = Expr .)
    (               reduce using rule 17 (ExprR -> Expr < = Expr .)
    $end            reduce using rule 17 (ExprR -> Expr < = Expr .)
    )               reduce using rule 17 (ExprR -> Expr < = Expr .)
    NEWLINE         reduce using rule 17 (ExprR -> Expr < = Expr .)
    ,               reduce using rule 17 (ExprR -> Expr < = Expr .)
    }               reduce using rule 17 (ExprR -> Expr < = Expr .)
    OU              shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! -               [ reduce using rule 17 (ExprR -> Expr < = Expr .) ]


state 86

    (18) ExprR -> Expr > = Expr .
    (22) Expr -> Expr . OU Termo
    (25) Expr -> Expr . + Termo
    (26) Expr -> Expr . - Termo

  ! shift/reduce conflict for - resolved as shift
    INT             reduce using rule 18 (ExprR -> Expr > = Expr .)
    NOME            reduce using rule 18 (ExprR -> Expr > = Expr .)
    id              reduce using rule 18 (ExprR -> Expr > = Expr .)
    DEF             reduce using rule 18 (ExprR -> Expr > = Expr .)
    IF              reduce using rule 18 (ExprR -> Expr > = Expr .)
    FOR             reduce using rule 18 (ExprR -> Expr > = Expr .)
    PRINT           reduce using rule 18 (ExprR -> Expr > = Expr .)
    SCAN            reduce using rule 18 (ExprR -> Expr > = Expr .)
    num             reduce using rule 18 (ExprR -> Expr > = Expr .)
    TRUE            reduce using rule 18 (ExprR -> Expr > = Expr .)
    FALSE           reduce using rule 18 (ExprR -> Expr > = Expr .)
    (               reduce using rule 18 (ExprR -> Expr > = Expr .)
    $end            reduce using rule 18 (ExprR -> Expr > = Expr .)
    )               reduce using rule 18 (ExprR -> Expr > = Expr .)
    NEWLINE         reduce using rule 18 (ExprR -> Expr > = Expr .)
    ,               reduce using rule 18 (ExprR -> Expr > = Expr .)
    }               reduce using rule 18 (ExprR -> Expr > = Expr .)
    OU              shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! -               [ reduce using rule 18 (ExprR -> Expr > = Expr .) ]


state 87

    (33) Atribuicao -> id = NOME ( . )

    )               shift and go to state 99


state 88

    (53) FUNC -> DEF NOME ( ARGS . ) { Operacoes }
    (54) FUNC -> DEF NOME ( ARGS . ) { NEWLINE Operacoes NEWLINE }
    (52) ARGS -> ARGS . , ARG

    )               shift and go to state 100
    ,               shift and go to state 101


state 89

    (49) ARGS -> ARG .

    )               reduce using rule 49 (ARGS -> ARG .)
    ,               reduce using rule 49 (ARGS -> ARG .)


state 90

    (51) ARG -> id .

    )               reduce using rule 51 (ARG -> id .)
    ,               reduce using rule 51 (ARG -> id .)


state 91

    (59) MAINF -> DEF MAIN ( ) . { Operacoes }

    {               shift and go to state 102


state 92

    (46) IFELSE -> IF ( ExprR ) . { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> IF ( ExprR ) . { Operacoes }

    {               shift and go to state 103


state 93

    (48) FORDO -> FOR ( Operacoes , . ExprR ) DO { Operacoes }
    (15) ExprR -> . Expr < Expr
    (16) ExprR -> . Expr > Expr
    (17) ExprR -> . Expr < = Expr
    (18) ExprR -> . Expr > = Expr
    (19) ExprR -> . Expr EQUALS Expr
    (20) ExprR -> . Expr NOTEQUALS Expr
    (23) ExprR -> . Expr
    (22) Expr -> . Expr OU Termo
    (24) Expr -> . Termo
    (25) Expr -> . Expr + Termo
    (26) Expr -> . Expr - Termo
    (27) Expr -> . Termo * Factor
    (28) Expr -> . Termo % Factor
    (29) Expr -> . Termo / Factor
    (21) Termo -> . Termo E Factor
    (30) Termo -> . Factor
    (9) Factor -> . num
    (10) Factor -> . - num
    (11) Factor -> . id
    (12) Factor -> . TRUE
    (13) Factor -> . FALSE
    (14) Factor -> . ( ExprR )

    num             shift and go to state 28
    -               shift and go to state 22
    id              shift and go to state 46
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    (               shift and go to state 19

    ExprR                          shift and go to state 104
    Expr                           shift and go to state 9
    Termo                          shift and go to state 21
    Factor                         shift and go to state 23

state 94

    (37) Operacoes -> Operacoes Operacao .

    ,               reduce using rule 37 (Operacoes -> Operacoes Operacao .)
    NEWLINE         reduce using rule 37 (Operacoes -> Operacoes Operacao .)
    NOME            reduce using rule 37 (Operacoes -> Operacoes Operacao .)
    IF              reduce using rule 37 (Operacoes -> Operacoes Operacao .)
    FOR             reduce using rule 37 (Operacoes -> Operacoes Operacao .)
    PRINT           reduce using rule 37 (Operacoes -> Operacoes Operacao .)
    SCAN            reduce using rule 37 (Operacoes -> Operacoes Operacao .)
    id              reduce using rule 37 (Operacoes -> Operacoes Operacao .)
    }               reduce using rule 37 (Operacoes -> Operacoes Operacao .)


state 95

    (38) Operacoes -> Operacoes NEWLINE . Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 105
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 96

    (56) PRINTER -> PRINT ( TEXTO ) .

    INT             reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    NOME            reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    id              reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    DEF             reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    IF              reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    FOR             reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    PRINT           reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    SCAN            reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    num             reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    -               reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    TRUE            reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    FALSE           reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    (               reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    $end            reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    ,               reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    NEWLINE         reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)
    }               reduce using rule 56 (PRINTER -> PRINT ( TEXTO ) .)


state 97

    (57) PRINTER -> PRINT ( id ) .

    INT             reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    NOME            reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    id              reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    DEF             reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    IF              reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    FOR             reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    PRINT           reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    SCAN            reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    num             reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    -               reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    TRUE            reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    FALSE           reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    (               reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    $end            reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    ,               reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    NEWLINE         reduce using rule 57 (PRINTER -> PRINT ( id ) .)
    }               reduce using rule 57 (PRINTER -> PRINT ( id ) .)


state 98

    (58) SCANNER -> SCAN ( id ) .

    INT             reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    NOME            reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    id              reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    DEF             reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    IF              reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    FOR             reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    PRINT           reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    SCAN            reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    num             reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    -               reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    TRUE            reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    FALSE           reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    (               reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    $end            reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    ,               reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    NEWLINE         reduce using rule 58 (SCANNER -> SCAN ( id ) .)
    }               reduce using rule 58 (SCANNER -> SCAN ( id ) .)


state 99

    (33) Atribuicao -> id = NOME ( ) .

    NEWLINE         reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    id              reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    INT             reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    NOME            reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    DEF             reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    IF              reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    FOR             reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    PRINT           reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    SCAN            reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    num             reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    -               reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    TRUE            reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    FALSE           reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    (               reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    $end            reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    ,               reduce using rule 33 (Atribuicao -> id = NOME ( ) .)
    }               reduce using rule 33 (Atribuicao -> id = NOME ( ) .)


state 100

    (53) FUNC -> DEF NOME ( ARGS ) . { Operacoes }
    (54) FUNC -> DEF NOME ( ARGS ) . { NEWLINE Operacoes NEWLINE }

    {               shift and go to state 106


state 101

    (52) ARGS -> ARGS , . ARG
    (50) ARG -> .
    (51) ARG -> . id

    )               reduce using rule 50 (ARG -> .)
    ,               reduce using rule 50 (ARG -> .)
    id              shift and go to state 90

    ARG                            shift and go to state 107

state 102

    (59) MAINF -> DEF MAIN ( ) { . Operacoes }
    (36) Operacoes -> . Operacao
    (37) Operacoes -> . Operacoes Operacao
    (38) Operacoes -> . Operacoes NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacoes                      shift and go to state 108
    Operacao                       shift and go to state 79
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 103

    (46) IFELSE -> IF ( ExprR ) { . Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> IF ( ExprR ) { . Operacoes }
    (36) Operacoes -> . Operacao
    (37) Operacoes -> . Operacoes Operacao
    (38) Operacoes -> . Operacoes NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacoes                      shift and go to state 109
    Operacao                       shift and go to state 79
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 104

    (48) FORDO -> FOR ( Operacoes , ExprR . ) DO { Operacoes }

    )               shift and go to state 110


state 105

    (38) Operacoes -> Operacoes NEWLINE Operacao .

    ,               reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)
    NEWLINE         reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)
    NOME            reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)
    IF              reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)
    FOR             reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)
    PRINT           reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)
    SCAN            reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)
    id              reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)
    }               reduce using rule 38 (Operacoes -> Operacoes NEWLINE Operacao .)


state 106

    (53) FUNC -> DEF NOME ( ARGS ) { . Operacoes }
    (54) FUNC -> DEF NOME ( ARGS ) { . NEWLINE Operacoes NEWLINE }
    (36) Operacoes -> . Operacao
    (37) Operacoes -> . Operacoes Operacao
    (38) Operacoes -> . Operacoes NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NEWLINE         shift and go to state 112
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacoes                      shift and go to state 111
    Operacao                       shift and go to state 79
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 107

    (52) ARGS -> ARGS , ARG .

    )               reduce using rule 52 (ARGS -> ARGS , ARG .)
    ,               reduce using rule 52 (ARGS -> ARGS , ARG .)


state 108

    (59) MAINF -> DEF MAIN ( ) { Operacoes . }
    (37) Operacoes -> Operacoes . Operacao
    (38) Operacoes -> Operacoes . NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    }               shift and go to state 113
    NEWLINE         shift and go to state 95
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 94
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 109

    (46) IFELSE -> IF ( ExprR ) { Operacoes . } ELSE { Operacoes }
    (47) ONLYIF -> IF ( ExprR ) { Operacoes . }
    (37) Operacoes -> Operacoes . Operacao
    (38) Operacoes -> Operacoes . NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    }               shift and go to state 114
    NEWLINE         shift and go to state 95
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 94
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 110

    (48) FORDO -> FOR ( Operacoes , ExprR ) . DO { Operacoes }

    DO              shift and go to state 115


state 111

    (53) FUNC -> DEF NOME ( ARGS ) { Operacoes . }
    (37) Operacoes -> Operacoes . Operacao
    (38) Operacoes -> Operacoes . NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    }               shift and go to state 116
    NEWLINE         shift and go to state 95
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 94
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 112

    (54) FUNC -> DEF NOME ( ARGS ) { NEWLINE . Operacoes NEWLINE }
    (36) Operacoes -> . Operacao
    (37) Operacoes -> . Operacoes Operacao
    (38) Operacoes -> . Operacoes NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacoes                      shift and go to state 117
    Operacao                       shift and go to state 79
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 113

    (59) MAINF -> DEF MAIN ( ) { Operacoes } .

    INT             reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    NOME            reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    id              reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    DEF             reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    IF              reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    FOR             reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    PRINT           reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    SCAN            reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    num             reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    -               reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    TRUE            reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    FALSE           reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    (               reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)
    $end            reduce using rule 59 (MAINF -> DEF MAIN ( ) { Operacoes } .)


state 114

    (46) IFELSE -> IF ( ExprR ) { Operacoes } . ELSE { Operacoes }
    (47) ONLYIF -> IF ( ExprR ) { Operacoes } .

    ELSE            shift and go to state 118
    INT             reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    NOME            reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    id              reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    DEF             reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    IF              reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    FOR             reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    PRINT           reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    SCAN            reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    num             reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    -               reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    TRUE            reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    FALSE           reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    (               reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    $end            reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    ,               reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    NEWLINE         reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)
    }               reduce using rule 47 (ONLYIF -> IF ( ExprR ) { Operacoes } .)


state 115

    (48) FORDO -> FOR ( Operacoes , ExprR ) DO . { Operacoes }

    {               shift and go to state 119


state 116

    (53) FUNC -> DEF NOME ( ARGS ) { Operacoes } .

    INT             reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    NOME            reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    id              reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    DEF             reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    IF              reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    FOR             reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    PRINT           reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    SCAN            reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    num             reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    -               reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    TRUE            reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    FALSE           reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    (               reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)
    $end            reduce using rule 53 (FUNC -> DEF NOME ( ARGS ) { Operacoes } .)


state 117

    (54) FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes . NEWLINE }
    (37) Operacoes -> Operacoes . Operacao
    (38) Operacoes -> Operacoes . NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NEWLINE         shift and go to state 120
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 94
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 118

    (46) IFELSE -> IF ( ExprR ) { Operacoes } ELSE . { Operacoes }

    {               shift and go to state 121


state 119

    (48) FORDO -> FOR ( Operacoes , ExprR ) DO { . Operacoes }
    (36) Operacoes -> . Operacao
    (37) Operacoes -> . Operacoes Operacao
    (38) Operacoes -> . Operacoes NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacoes                      shift and go to state 122
    Operacao                       shift and go to state 79
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 120

    (54) FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE . }
    (38) Operacoes -> Operacoes NEWLINE . Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    }               shift and go to state 123
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 105
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 121

    (46) IFELSE -> IF ( ExprR ) { Operacoes } ELSE { . Operacoes }
    (36) Operacoes -> . Operacao
    (37) Operacoes -> . Operacoes Operacao
    (38) Operacoes -> . Operacoes NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacoes                      shift and go to state 124
    Operacao                       shift and go to state 79
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 122

    (48) FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes . }
    (37) Operacoes -> Operacoes . Operacao
    (38) Operacoes -> Operacoes . NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    }               shift and go to state 125
    NEWLINE         shift and go to state 95
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 94
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 123

    (54) FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .

    INT             reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    NOME            reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    id              reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    DEF             reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    IF              reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    FOR             reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    PRINT           reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    SCAN            reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    num             reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    -               reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    TRUE            reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    FALSE           reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    (               reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)
    $end            reduce using rule 54 (FUNC -> DEF NOME ( ARGS ) { NEWLINE Operacoes NEWLINE } .)


state 124

    (46) IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes . }
    (37) Operacoes -> Operacoes . Operacao
    (38) Operacoes -> Operacoes . NEWLINE Operacao
    (39) Operacao -> . Atribuicoes
    (40) Operacao -> . IFELSE
    (41) Operacao -> . ONLYIF
    (42) Operacao -> . FORDO
    (43) Operacao -> . PRINTER
    (44) Operacao -> . SCANNER
    (45) Operacao -> . NOME ( )
    (34) Atribuicoes -> . Atribuicao
    (35) Atribuicoes -> . Atribuicoes Atribuicao
    (46) IFELSE -> . IF ( ExprR ) { Operacoes } ELSE { Operacoes }
    (47) ONLYIF -> . IF ( ExprR ) { Operacoes }
    (48) FORDO -> . FOR ( Operacoes , ExprR ) DO { Operacoes }
    (56) PRINTER -> . PRINT ( TEXTO )
    (57) PRINTER -> . PRINT ( id )
    (58) SCANNER -> . SCAN ( id )
    (32) Atribuicao -> . id = ExprR
    (33) Atribuicao -> . id = NOME ( )

    }               shift and go to state 126
    NEWLINE         shift and go to state 95
    NOME            shift and go to state 18
    IF              shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    SCAN            shift and go to state 27
    id              shift and go to state 43

    Operacao                       shift and go to state 94
    Atribuicoes                    shift and go to state 12
    IFELSE                         shift and go to state 13
    ONLYIF                         shift and go to state 14
    FORDO                          shift and go to state 15
    PRINTER                        shift and go to state 16
    SCANNER                        shift and go to state 17
    Atribuicao                     shift and go to state 80

state 125

    (48) FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .

    INT             reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    NOME            reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    id              reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    DEF             reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    IF              reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    FOR             reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    PRINT           reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    SCAN            reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    num             reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    -               reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    TRUE            reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    FALSE           reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    (               reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    $end            reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    ,               reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    NEWLINE         reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)
    }               reduce using rule 48 (FORDO -> FOR ( Operacoes , ExprR ) DO { Operacoes } .)


state 126

    (46) IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .

    INT             reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    NOME            reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    id              reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    DEF             reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    IF              reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    FOR             reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    PRINT           reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    SCAN            reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    num             reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    -               reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    TRUE            reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    FALSE           reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    (               reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    $end            reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    ,               reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    NEWLINE         reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)
    }               reduce using rule 46 (IFELSE -> IF ( ExprR ) { Operacoes } ELSE { Operacoes } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for - in state 9 resolved as shift
WARNING: shift/reduce conflict for id in state 12 resolved as shift
WARNING: shift/reduce conflict for - in state 58 resolved as shift
WARNING: shift/reduce conflict for - in state 60 resolved as shift
WARNING: shift/reduce conflict for - in state 62 resolved as shift
WARNING: shift/reduce conflict for - in state 63 resolved as shift
WARNING: shift/reduce conflict for - in state 85 resolved as shift
WARNING: shift/reduce conflict for - in state 86 resolved as shift
